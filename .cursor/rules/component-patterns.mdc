---
globs: *.tsx,*.ts
description: Component development patterns and conventions
---

# Component Development Patterns

## Component Architecture

This project follows React component best practices with TypeScript and shadcn/ui.

### UI Component Structure

- **Base Components**: Located in `/components/ui/` using shadcn/ui patterns
- **Feature Components**: Organized by domain (auth, editor, projects, subscription)
- **Page Components**: Located in `/app` following Next.js App Router conventions

### Example Component Pattern

```tsx
'use client';

import { ComponentProps } from 'react';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';

interface MyComponentProps {
  onAction: () => void;
  isLoading?: boolean;
  className?: string;
}

export function MyComponent({
  onAction,
  isLoading = false,
  className,
}: MyComponentProps) {
  return (
    <div className={cn('base-styles', className)}>
      <Button onClick={onAction} disabled={isLoading}>
        {isLoading ? 'Loading...' : 'Action'}
      </Button>
    </div>
  );
}
```

### Key Patterns

1. **Always use TypeScript interfaces** for component props
2. **Use shadcn/ui components** as building blocks ([button.tsx](mdc:components/ui/button.tsx) example)
3. **Extract reusable components** - Example: [EditorToolbar](mdc:components/editor/toolbar.tsx)
4. **Use `cn()` utility** for conditional className handling
5. **Client components** should use `'use client'` directive when needed

### State Management

- **Local State**: `useState` for component-specific state
- **Context**: React Context for shared state (see [project.tsx](mdc:app/context/project.tsx))
- **Server State**: Supabase client for database operations

### Event Handling Patterns

- **Callbacks**: Pass functions as props for component communication
- **Async Operations**: Use proper loading states and error handling
- **Form Handling**: Use controlled components with validation

### Styling Conventions

- **Tailwind CSS**: Primary styling approach
- **Component Variants**: Use `class-variance-authority` for complex component variants
- **Consistent Spacing**: Use Tailwind spacing scale consistently
- **Responsive Design**: Mobile-first approach with responsive breakpoints
