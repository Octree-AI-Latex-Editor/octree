---
globs: *.tsx,*.ts
description: React and TypeScript coding standards
alwaysApply: true
---

# React & TypeScript Standards

## Code Quality Standards
- **TypeScript**: Always use TypeScript with strict mode enabled
- **Components**: Functional components with hooks (no class components)
- **Prop Types**: Use TypeScript interfaces, not PropTypes
- **Naming**: PascalCase for components, camelCase for functions/variables
- **File Organization**: One component per file, named exports preferred

## Import Organization
```tsx
// 1. React and Next.js imports
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';

// 2. Third-party libraries
import { Button } from '@/components/ui/button';

// 3. Internal imports
import { createClient } from '@/lib/supabase/client';
import type { Database } from '@/database.types';
```

## Best Practices
- **Use TypeScript interfaces** for all props and complex data structures
- **Prefer composition over inheritance** - build complex UI from simple components
- **Extract custom hooks** for reusable stateful logic
- **Use proper dependency arrays** in useEffect hooks
- **Handle loading and error states** explicitly in components
- **Use semantic HTML** and proper accessibility attributes
